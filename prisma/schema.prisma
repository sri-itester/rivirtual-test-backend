// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Admin
  Manager
  Associate
}

enum ActivityType {
  NOTE
  CALL
  SMS
  WHATSAPP
  EMAIL
  TASK
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  phone          String?
  role           Role
  passwordHash   String

  // Manager/Associate relation (self-join)
  managerId      Int?
  manager        User?      @relation("ManagerUserRelation", fields: [managerId], references: [id])
  teamMembers    User[]     @relation("ManagerUserRelation")

  // Activity actor
  activities     Activity[] @relation("ActivityPerformer")

  // Lead assignment (reverse relation)
  assignedLeads  Lead[]     @relation("LeadAssignee")

  createdAt      DateTime   @default(now())
}

model Lead {
  id                Int       @id @default(autoincrement())
  salutation        String?
  firstName         String
  lastName          String
  email             String?
  countryCode       String?
  mobile            String
  whatsapp          String?
  leadType          String?   // Buyer | Seller | Owner | Tenant
  preferredLanguage String?
  companyName       String?
  country           String
  state             String
  city              String
  leadStage         String    // Lead | Prospect | Customer | Disqualified | Invalid

  // âœ… Lead assignment (many-to-one)
  assignedToId      Int?
  assignedTo        User?     @relation("LeadAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  activities        Activity[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([assignedToId])
}

model Activity {
  id             Int          @id @default(autoincrement())
  leadId         Int?
  lead           Lead?        @relation(fields: [leadId], references: [id], onDelete: SetNull)
  type           ActivityType
  content        Json
  performedById  Int?
  performedBy    User?        @relation("ActivityPerformer", fields: [performedById], references: [id], onDelete: SetNull)
  createdAt      DateTime     @default(now())

  @@index([leadId])
  @@index([performedById])
}

model WebhookEvent {
  id            Int       @id @default(autoincrement())
  type          String
  payload       Json
  createdAt     DateTime  @default(now())
}
